[
  {
    "id": 1,
    "question": "What is useState and how does it work in React?",
    "answer": "useState is a React Hook that allows you to add state to functional components. It returns an array with two elements: the current state value and a function to update that value. When the state is updated, the component re-renders with the new value."
  },
  {
    "id": 2,
    "question": "What is the purpose of useEffect in React?",
    "answer": "useEffect is a React Hook used to handle side effects in functional components, such as data fetching, subscriptions, or manually changing the DOM. It runs after the component renders and can be configured to run on every render, only once, or when specific values change."
  },
  {
    "id": 3,
    "question": "What is a custom hook in React and when should you use one?",
    "answer": "A custom hook is a reusable function that starts with 'use' and allows you to extract and reuse stateful logic across multiple components. You should use one when you have logic that is shared by multiple components to keep your code DRY and more maintainable."
  },
  {
    "id": 4,
    "question": "Difference between controlled and uncontrolled components? Which one is better?",
    "answer": "Controlled components are form elements whose values are managed by React state. Uncontrolled components store their own state internally and rely on refs to access values. Controlled components offer more control and are generally preferred in React for predictability and easier validation."
  },
  {
    "id": 5,
    "question": "Tell us something about useFormStatus() (explore and explain)",
    "answer": "useFormStatus is a hook provided by React (experimental or part of specific frameworks like React Server Components) that gives information about the current status of a form submission. It allows you to check if a form is currently submitting, succeeded, or failed. It's useful for showing loading indicators or handling conditional UI during form submission."
  }
]
